# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a ubuntu platform

on:
  push:
    branches: [ "main" ]
    paths:
      - '**/*.h'
      - '**/*.hpp'
      - '**/*.ui'
      - '**/*.cmake'
      - '*.cpp'
      - '*.rc'
      - '*.qrc'
      - 'CMakeLists.txt'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.h'
      - '**/*.hpp'
      - '**/*.ui'
      - '**/*.cmake'
      - '*.cpp'
      - '*.rc'
      - '*.qrc'
      - 'CMakeLists.txt'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '5.15.2'
        host: 'linux'
        target: 'desktop'
        cache: true
        # arch: 'win64_msvc2019_64'
        # dir: '${{ github.workspace }}/example/'
        install-deps: 'true'
        modules: 'qtcharts qtdatavis3d'
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -S ${{github.workspace}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}
    - name: install
      run: cmake --install ${{github.workspace}}/build
    - name: generate deb package
      working-directory: ${{github.workspace}}/build
      run: cpack -G DEB
    - name: generate tgz package
      working-directory: ${{github.workspace}}/build
      run: cpack -G TGZ

    # - name: Upload Deb Artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #       name: IIViewer ubuntu deb
    #       if-no-files-found: ignore
    #       path: ${{github.workspace}}/build/IIViewer-*-Linux.deb
    #       compression-level: 0 # no compression
    # - name: Upload Tgz Artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #       name: IIViewer ubuntu tgz
    #       if-no-files-found: ignore
    #       path: ${{github.workspace}}/build/IIViewer-*-Linux.tar.gz
    #       compression-level: 0 # no compression

