name: Release win64

on:
  push:
    tags:
      - 'v*'  # 匹配v开头的tag
permissions:
  contents: write   # 关键：允许创建/更新 Release

jobs:
  build:
    runs-on: windows-2022

    steps:
    - run: gh auth status
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '5.15.2'
        cache: true
        arch: 'win64_msvc2019_64'
        modules: 'qtcharts qtdatavis3d'

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}\build -S ${{github.workspace}} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}\build\install

    - name: Build
      run: cmake --build ${{github.workspace}}\build --config Release

    - name: Install NASM
      shell: pwsh
      run: |
        choco install nasm -y
        echo "C:\ProgramData\chocolatey\bin" >> $env:GITHUB_PATH

    - name: Setup MSVC environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Build OpenSSL 1.1.1w (Win64)
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        $OPENSSL_URL = "https://github.com/openssl/openssl/releases/download/OpenSSL_1_1_1w/openssl-1.1.1w.tar.gz"
        Invoke-WebRequest -Uri $OPENSSL_URL -OutFile openssl.tar.gz
        tar -xzf openssl.tar.gz
        cd openssl-1.1.1w
        perl Configure VC-WIN64A --prefix="$PWD/install"

        # 编译 & 安装
        nmake
        nmake install

        # 查找 DLL 并复制到 bin/Release
        $dlls = Get-ChildItem -Recurse -Include "libssl-1_1-x64.dll","libcrypto-1_1-x64.dll"
        if ($dlls.Count -eq 0) { throw "❌ OpenSSL DLL not found" }
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\bin\Release" | Out-Null
        foreach ($dll in $dlls) {
          Copy-Item $dll.FullName "${{ github.workspace }}\bin\Release" -Force
        }
        Write-Host "✅ OpenSSL DLLs copied to bin/Release"

    - name: install
      run: cmake --install ${{github.workspace}}\build --config Release
    - name: generate installer package
      working-directory: ${{github.workspace}}\build
      run: cpack -C Release -G NSIS
    - name: generate zip package
      working-directory: ${{github.workspace}}\build
      run: cpack -C Release -G ZIP

    - name: Package artifacts
      run: |
        mkdir -p release
        cp ${{github.workspace}}/build/*.exe release/
        cp ${{github.workspace}}/build/*.zip release/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/*.exe
          release/*.zip
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
