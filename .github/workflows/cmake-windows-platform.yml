# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    # - name: Remove old Qt
    #   run: rm ${{github.workspace}}\thirdparty\Qt -r -force
    - name: Install Qt
      uses: jurplel/install-qt-action@v3.3.0
      with:
        dir: '${{github.workspace}}\thirdparty'
        version: '5.15.2'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtcharts qtdatavis3d'
        set-env: 'true'
        cache: 'false'
        cache-key-prefix: 'install-qt-action'
        install-deps: 'true'
        # archives: 'qtbase qtsvg'
        # setup-python: 'true'
        # tools: 'tools_ifw tools_qtcreator,qt.tools.qtcreator'
        # tools-only: 'false'
        # aqtversion: '==3.1.*'
        # py7zrversion: '==0.20.*'
        # extra: '--external 7z'
    - name: list Qt5_DIR
      run: dir ${{github.workspace}}\thirdparty\Qt\5.15.2\msvc2019_64\lib\cmake\Qt5
    - name: set Qt5 dir env
      shell: bash
      run: |
        echo "Qt5_DIR=${{env.Qt5_Dir}}\lib\cmake\Qt5" >> $env:GITHUB_ENV
        echo "Qt5_ROOT=${{env.Qt5_Dir}}" >> $env:GITHUB_ENV
        echo "Qt5_ROOT_DIR=${{env.Qt5_Dir}}" >> $env:GITHUB_ENV
    - name: list cmake version
      shell: bash
      run: cmake --version
    - uses: actions/checkout@v3

    - name: Configure CMake
      shell: bash
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}\build -S ${{github.workspace}} --log-level=DEBUG --debug-find-pkg=Qt5 -DCMAKE_INSTALL_PREFIX=${{github.workspace}}\build\install -DCMAKE_PREFIX_PATH=${{github.workspace}}\thirdparty\Qt\5.15.2\msvc2019_64

    - name: Build
      shell: bash
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}\build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}\build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

