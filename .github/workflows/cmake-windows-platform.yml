# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on windows

on:
  push:
    branches: [ "dev" ]
    paths:
      - '**/*.h'
      - '**/*.hpp'
      - '**/*.ui'
      - '**/*.cmake'
      - '**/*.cpp'
      - '**/*.rc'
      - '**/*.qrc'
      - 'CMakeLists.txt'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.h'
      - '**/*.hpp'
      - '**/*.ui'
      - '**/*.cmake'
      - '**/*.cpp'
      - '**/*.rc'
      - '**/*.qrc'
      - 'CMakeLists.txt'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    # - name: Remove old Qt
    #   run: rm ${{github.workspace}}\thirdparty\Qt -r -force
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '5.15.2'
        cache: true
        arch: 'win64_msvc2019_64'
        modules: 'qtcharts qtdatavis3d'
        # dir: '${{github.workspace}}\thirdparty'
        # version: '5.15.2'
        # host: 'windows'
        # target: 'desktop'
        # arch: 'win64_msvc2019_64'
        # modules: 'qtcharts qtdatavis3d'
        # set-env: 'true'
        # cache: 'false'
        # cache-key-prefix: 'install-qt-action'
        # install-deps: 'true'

    # - name: list Qt5_DIR
    #   run: dir ${{github.workspace}}\thirdparty\Qt\5.15.2\msvc2019_64\lib\cmake\Qt5
    # - name: set Qt5 dir env
    #   shell: bash
    #   run: |
    #     echo "Qt5_DIR=${{env.Qt5_Dir}}\lib\cmake\Qt5" >> $env:GITHUB_ENV
    #     echo "Qt5_ROOT=${{env.Qt5_Dir}}" >> $env:GITHUB_ENV
    #     echo "Qt5_ROOT_DIR=${{env.Qt5_Dir}}" >> $env:GITHUB_ENV
    # - name: list cmake version
      # shell: bash
      # run: cmake --version
    - name: Show Qt5_DIR
      run: echo "Qt5_DIR is $Qt5_DIR, Qt5_Dir is ${env:Qt5_Dir}"

    - name: Check OpenSSL runtime in Qt
      shell: pwsh
      run: |
        $qtBin = "${env:Qt5_Dir}\bin"
        Write-Host "Checking for OpenSSL DLLs in $qtBin ..."
        if (Test-Path "$qtBin\libssl*.dll" -or Test-Path "$qtBin\libcrypto*.dll") {
          Write-Host "✅ OpenSSL runtime found."
        } else {
          Write-Error "❌ OpenSSL runtime not found."
          exit 1
        }
        # 生成 sslcheck.cpp
        @"
        #include <QSslSocket>
        #include <QDebug>
        int main() {
          qDebug() << "SSL supported:" << QSslSocket::supportsSsl();
          qDebug() << "SSL library version:" << QSslSocket::sslLibraryVersionString();
          return QSslSocket::supportsSsl() ? 0 : 1;
        }
        "@ | Set-Content sslcheck.cpp
        & "$qtBin\qmake.exe" sslcheck.cpp -o sslcheck.exe
        .\sslcheck.exe

    - uses: actions/checkout@v4

    - name: Configure CMake
      # shell: bash
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}\build -S ${{github.workspace}} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}\build\install #--log-level=DEBUG --debug-find-pkg=Qt5 
      #  -DCMAKE_PREFIX_PATH=${{github.workspace}}\thirdparty\Qt\5.15.2\msvc2019_64

    - name: Build
      # shell: bash
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}\build --config ${{env.BUILD_TYPE}}

    # - name: Test
      # working-directory: ${{github.workspace}}\build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: ctest -C ${{env.BUILD_TYPE}}
    - name: install
      run: cmake --install ${{github.workspace}}\build --config ${{env.BUILD_TYPE}}
    - name: generate installer package
      working-directory: ${{github.workspace}}\build
      run: cpack -C ${{env.BUILD_TYPE}} -G NSIS
    - name: generate zip package
      working-directory: ${{github.workspace}}\build
      run: cpack -C ${{env.BUILD_TYPE}} -G ZIP

    # - name: Upload Installer Artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #       name: IIViewer windows installer
    #       if-no-files-found: ignore
    #       path: ${{github.workspace}}\build\IIViewer-*-win64.exe
    #       compression-level: 0 # no compression
    # - name: Upload Zip Artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #       name: IIViewer windows zip
    #       if-no-files-found: ignore
    #       path: ${{github.workspace}}\build\IIViewer-*-win64.zip
    #       compression-level: 0 # no compression
